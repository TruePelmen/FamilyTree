// <auto-generated />
using System;
using FamilyTree.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FamilyTree.DAL.Migrations
{
    [DbContext(typeof(FamilyTreeContext))]
    partial class FamilyTreeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("event_id_seq");

            modelBuilder.HasSequence("media_event_id_seq");

            modelBuilder.HasSequence("media_id_seq");

            modelBuilder.HasSequence("media_person_id_seq");

            modelBuilder.HasSequence("person_id_seq");

            modelBuilder.HasSequence("relationship_id_seq");

            modelBuilder.HasSequence("special_record_id_seq");

            modelBuilder.HasSequence("tree_id_seq");

            modelBuilder.HasSequence("tree_person_id_seq");

            modelBuilder.HasSequence("user_tree_id_seq");

            modelBuilder.Entity("FamilyTree.DAL.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('event_id_seq'::regclass)");

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EventDate")
                        .HasColumnType("date")
                        .HasColumnName("event_date");

                    b.Property<string>("EventPlace")
                        .HasColumnType("character varying")
                        .HasColumnName("event_place");

                    b.Property<string>("EventType")
                        .HasColumnType("character varying")
                        .HasColumnName("event_type");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.HasKey("Id")
                        .HasName("event_pkey");

                    b.HasIndex("PersonId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('media_id_seq'::regclass)");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("FilePath")
                        .HasColumnType("character varying")
                        .HasColumnName("file_path");

                    b.Property<bool?>("MainPhoto")
                        .HasColumnType("boolean")
                        .HasColumnName("main_photo");

                    b.Property<string>("MediaType")
                        .HasColumnType("character varying")
                        .HasColumnName("media_type");

                    b.Property<string>("Place")
                        .HasColumnType("character varying")
                        .HasColumnName("place");

                    b.Property<int?>("TaggedPerson")
                        .HasColumnType("integer")
                        .HasColumnName("tagged_person");

                    b.HasKey("Id")
                        .HasName("media_pkey");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.MediaEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('media_event_id_seq'::regclass)");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<int>("MediaId")
                        .HasColumnType("integer")
                        .HasColumnName("media_id");

                    b.HasKey("Id")
                        .HasName("media_event_pkey");

                    b.HasIndex("EventId");

                    b.HasIndex("MediaId");

                    b.ToTable("Media_Event", (string)null);
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.MediaPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('media_person_id_seq'::regclass)");

                    b.Property<int>("MediaId")
                        .HasColumnType("integer")
                        .HasColumnName("media_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.HasKey("Id")
                        .HasName("media_person_pkey");

                    b.HasIndex("MediaId");

                    b.HasIndex("PersonId");

                    b.ToTable("Media_Person", (string)null);
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('person_id_seq'::regclass)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateOnly?>("DeathDate")
                        .HasColumnType("date")
                        .HasColumnName("death_date");

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasColumnType("character varying")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .HasColumnType("character varying")
                        .HasColumnName("last_name");

                    b.Property<string>("MaidenName")
                        .HasColumnType("character varying")
                        .HasColumnName("maiden_name");

                    b.Property<string>("OtherNameVariants")
                        .HasColumnType("character varying")
                        .HasColumnName("other_name_variants");

                    b.Property<bool>("PrimaryPerson")
                        .HasColumnType("boolean")
                        .HasColumnName("primary_person");

                    b.HasKey("Id")
                        .HasName("person_pkey");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('relationship_id_seq'::regclass)");

                    b.Property<int>("PersonId1")
                        .HasColumnType("integer")
                        .HasColumnName("person_id1");

                    b.Property<int>("PersonId2")
                        .HasColumnType("integer")
                        .HasColumnName("person_id2");

                    b.Property<string>("RelationshipType")
                        .HasColumnType("character varying")
                        .HasColumnName("relationship_type");

                    b.HasKey("Id")
                        .HasName("relationship_pkey");

                    b.HasIndex("PersonId1");

                    b.HasIndex("PersonId2");

                    b.ToTable("Relationship", (string)null);
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.SpecialRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('special_record_id_seq'::regclass)");

                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<int?>("HouseNumber")
                        .HasColumnType("integer")
                        .HasColumnName("house_number");

                    b.Property<string>("Priest")
                        .HasColumnType("character varying")
                        .HasColumnName("priest");

                    b.Property<string>("Record")
                        .HasColumnType("character varying")
                        .HasColumnName("record");

                    b.Property<string>("RecordType")
                        .HasColumnType("character varying")
                        .HasColumnName("record_type");

                    b.HasKey("Id")
                        .HasName("special_record_pkey");

                    b.HasIndex("EventId");

                    b.ToTable("Special_record", (string)null);
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.Tree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('tree_id_seq'::regclass)");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("tree_pkey");

                    b.ToTable("Tree", (string)null);
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.TreePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('tree_person_id_seq'::regclass)");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<int>("TreeId")
                        .HasColumnType("integer")
                        .HasColumnName("tree_id");

                    b.HasKey("Id")
                        .HasName("tree_person_pkey");

                    b.HasIndex("PersonId");

                    b.HasIndex("TreeId");

                    b.ToTable("Tree_Person", (string)null);
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.User", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnType("character varying")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.HasKey("Login")
                        .HasName("users_pkey");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.UserTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('user_tree_id_seq'::regclass)");

                    b.Property<string>("AccessType")
                        .HasColumnType("character varying")
                        .HasColumnName("access_type");

                    b.Property<int>("TreeId")
                        .HasColumnType("integer")
                        .HasColumnName("tree_id");

                    b.Property<string>("UserLogin")
                        .HasColumnType("character varying")
                        .HasColumnName("user_login");

                    b.HasKey("Id")
                        .HasName("user_tree_pkey");

                    b.HasIndex("TreeId");

                    b.HasIndex("UserLogin");

                    b.ToTable("User_Tree", (string)null);
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.Event", b =>
                {
                    b.HasOne("FamilyTree.DAL.Models.Person", "Person")
                        .WithMany("Events")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("event_person_id_fkey");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.MediaEvent", b =>
                {
                    b.HasOne("FamilyTree.DAL.Models.Event", "Event")
                        .WithMany("MediaEvents")
                        .HasForeignKey("EventId")
                        .HasConstraintName("media_event_event_id_fkey");

                    b.HasOne("FamilyTree.DAL.Models.Media", "Media")
                        .WithMany("MediaEvents")
                        .HasForeignKey("MediaId")
                        .IsRequired()
                        .HasConstraintName("media_event_media_id_fkey");

                    b.Navigation("Event");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.MediaPerson", b =>
                {
                    b.HasOne("FamilyTree.DAL.Models.Media", "Media")
                        .WithMany("MediaPeople")
                        .HasForeignKey("MediaId")
                        .IsRequired()
                        .HasConstraintName("media_person_media_id_fkey");

                    b.HasOne("FamilyTree.DAL.Models.Person", "Person")
                        .WithMany("MediaPeople")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("media_person_person_id_fkey");

                    b.Navigation("Media");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.Relationship", b =>
                {
                    b.HasOne("FamilyTree.DAL.Models.Person", "PersonId1Navigation")
                        .WithMany("RelationshipPersonId1Navigations")
                        .HasForeignKey("PersonId1")
                        .IsRequired()
                        .HasConstraintName("relationship_person_id1_fkey");

                    b.HasOne("FamilyTree.DAL.Models.Person", "PersonId2Navigation")
                        .WithMany("RelationshipPersonId2Navigations")
                        .HasForeignKey("PersonId2")
                        .IsRequired()
                        .HasConstraintName("relationship_person_id2_fkey");

                    b.Navigation("PersonId1Navigation");

                    b.Navigation("PersonId2Navigation");
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.SpecialRecord", b =>
                {
                    b.HasOne("FamilyTree.DAL.Models.Event", "Event")
                        .WithMany("SpecialRecords")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("special_record_event_id_fkey");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.TreePerson", b =>
                {
                    b.HasOne("FamilyTree.DAL.Models.Person", "Person")
                        .WithMany("TreePeople")
                        .HasForeignKey("PersonId")
                        .IsRequired()
                        .HasConstraintName("tree_person_person_id_fkey");

                    b.HasOne("FamilyTree.DAL.Models.Tree", "Tree")
                        .WithMany("TreePeople")
                        .HasForeignKey("TreeId")
                        .IsRequired()
                        .HasConstraintName("tree_person_tree_id_fkey");

                    b.Navigation("Person");

                    b.Navigation("Tree");
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.UserTree", b =>
                {
                    b.HasOne("FamilyTree.DAL.Models.Tree", "Tree")
                        .WithMany("UserTrees")
                        .HasForeignKey("TreeId")
                        .IsRequired()
                        .HasConstraintName("user_tree_tree_id_fkey");

                    b.HasOne("FamilyTree.DAL.Models.User", "UserLoginNavigation")
                        .WithMany("UserTrees")
                        .HasForeignKey("UserLogin")
                        .HasConstraintName("user_tree_user_login_fkey");

                    b.Navigation("Tree");

                    b.Navigation("UserLoginNavigation");
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.Event", b =>
                {
                    b.Navigation("MediaEvents");

                    b.Navigation("SpecialRecords");
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.Media", b =>
                {
                    b.Navigation("MediaEvents");

                    b.Navigation("MediaPeople");
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.Person", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("MediaPeople");

                    b.Navigation("RelationshipPersonId1Navigations");

                    b.Navigation("RelationshipPersonId2Navigations");

                    b.Navigation("TreePeople");
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.Tree", b =>
                {
                    b.Navigation("TreePeople");

                    b.Navigation("UserTrees");
                });

            modelBuilder.Entity("FamilyTree.DAL.Models.User", b =>
                {
                    b.Navigation("UserTrees");
                });
#pragma warning restore 612, 618
        }
    }
}
